=== Plugin Name ===
Contributors: josephrogermoore
Donate link: http://josephrogermoore.com/leaveanote
Tags: comments, visual, notes, post-it
Requires at least: 2.9.1
Tested up to: 2.9.1
Stable tag: trunk

Leave-a-Note transforms your comments into post-it notes to drag and drop anywhere on the screen, saving the new position until it is moved again.

== Description ==

Leave-a-Note Visual commenting system changes the look and positioning of your Wordpress blog's comments, transforming each comment into a post-it note that can be moved all over the screen. Visitors to the blog can drag and drop the comments anywhere on the page, and through use of Wordpress's database, that positioning will be saved until someone else moves it. The result of that is, that if a user moves a note and no one else touches it, the next time he or she comes back to the page, it will be where they left it. The look of the note is determined by CSS, so the look of the 'container' of each comment is easily customizable through CSS only. In addition to changing the look of the comments, the plugin generates a button that will show or hide the notes. By default, the plugin will show all notes, but that can be changed in the admin menu.

== Installation ==

1. Upload the folder `leaveanote` to the `/wp-content/plugins/` directory
2. Activate the plugin through the 'Plugins' menu in WordPress

Leave-a-Note should now be installed. For further configuration details see the configuration section below.

== Frequently Asked Questions ==

If you have any questions, you can visit the [Leave-a-Note Forum](http://josephrogermoore.com/leaveanote/forum) and post your questions there.

== Changelog ==

None. This is the first release.

== Upgrade Notice ==

None. This is the first release.

== Screenshots ==

None yet.

== Configuration ==

There are two areas in the admin menu where you can configure the behavior of the plugin: the 'Settings' panel, and the 'Posts' screen. 

**Settings**

After installation, there should be a new option under 'Settings', called 'Leave-a-Note Comments'. Click there.

*Note Height*
This is how tall each note should be, measured in pixels. By default, it is set to 'auto'.

*Note Width*
This is how wide each note should be, measured in pixels. By default, it is set to '130'.

*Background Color*
This is the background color of the note. Must be hexidecimal format. By default it is the yellowish color 'FFFF99'.

*Use custom CSS style sheet
When checked, the plugin will ignore all the values inserted into the display section (height, width, and background color) of this menu. That way,  you can modify these values through your own CSS stylesheet without them overriding your code.

*Show/Hide*
Allows you to select the default behavior of the notes when the user loads the page. The user can toggle between hiding and showing the notes with the button generated by the plugin, but this allows the admin to choose which state is the default on page load.

**Posts**

You can also decide which posts will use the plugin, that way you're free to exclude it from some content where it may not be appropriate and add it to the posts where it would be.

*Posts Page*
After installation, a new column is added to the 'Posts' page, called 'Leave-a-Note'. It shows whether each post is set to 'on' or 'off'. You can modify this option by editing the specific post.

*Edit Post*
In the 'Edit Post' page, there will now be a new box at the end, called 'Leave-a-Note', with a switch labeled 'On' and 'Off'. Make your selection and update the post to have the change take effect.

== Hooks ==

This plugin requires two hooks to work properly:

`<?php wp_head(); ?>`

`<?php comment_class(); ?>`

**wp_head()**
The code `<?php wp_head(); ?>` needs to be in the header file of your blog's theme. If it's not there, adding it should not negatively affect your blog in any way. Just make sure to insert it just before the `</head>` tag in the 'header.php' file. This hook tells Wordpress and the plugin where your page's `<head>` ends, so it can perform any needed action there. In the case of the plugin, it attaches the needed scripts to make it function properly.

**comment_class()**
The code `<?php comment_class(); ?>` is a function that outputs the correct class names for each comment. Most comments sections use this function, though you might not be aware of it. It's buried beneath two layers of code from the basic template level. Most templates use `<?php comments_template(); ?>` to call the 'comments.php' file in your theme. Within this file should be the code `<?php wp_list_comments(); ?>` which calls the code that determines how each comment is marked up and prints them all out to the screen. By default, the `<?php wp_list_comments(); ?>` uses the `<?php comments_class(); ?>` function inside it. If you've never customized this function, it will be there. 

However, if you've customized your comment section, make sure that your markup fits these conditions:

1. Each comment needs to be enclosed in an `<li>` tag. As your comment section is a list of comments, rules of good markup would require that anyway.
2. Use `<?php comment_class(); ?>` inside the `<li>` tag.

An example of number two might look like this:
<code>
<li <?php comment_class(); ?> id=some_code_or_id>
   <?php comment_text(); ?>
</li>
</code>
== Troubleshooting ==

One known issue is that due to a lack of fixed positioning in IE 6, this plugin may not function properly in that browser.

If you encounter any problems after installation, check out the instructions in the 'Hooks' section to make sure your blog has the necessary hooks to function. If you still have any problems, check out the [Leave-a-Note](http://josephrogermoore.com/leaveanote/) page to report any bugs or ask for help.