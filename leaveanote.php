<?php 
/*
Plugin Name: Leave-a-Note Visual Commenting
Plugin URI: http://josephrogermoore.com/leaveanote
Version: 1.0
Author: Joseph Moore
Description: A visual commenting system for Wordpress blogs
*/

// function to generate markup for the plugin on/off switch on edit post

function leaveanote_write_custombox(){
	global $post;
	global $wpdb;
	$post_id = $post->ID;
	$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
	$query = "SELECT on_off FROM $leaveanote_posts WHERE post_ID=$post_id";
    $onoff = $wpdb->get_results($query);
	$OO = $onoff[0];
	$leaveanote_onoff = $OO->on_off; 
	echo '<form name="leaveanote_form" method="post" action="';
	echo str_replace( '%7E', '~', $_SERVER['REQUEST_URI']);
	echo '">';
	echo '<p><input type="radio" name="leaveanote_onoff" id="onoff_on" value="on"';
	if ($leaveanote_onoff == 'on') {
		echo ' checked '; 
	}
	echo '> <label for="onoff_on">On</label></p><p><input type="radio" name="leaveanote_onoff" id="onoff_off" value="off"';
	if ($leaveanote_onoff == 'off') {
		echo ' checked '; 
	}
	echo '> <label for="onoff_off">Off</label></p>';
}

// function to print admin template to the screen

function leaveanote_admin_page(){
	include('leaveanote_admin.php');
}

// check for class, initialize if it isn't there

if (!class_exists("LeaveaNoteVisualCommenting")) {
    class LeaveaNoteVisualCommenting {
        function LeaveaNoteVisualCommenting() {
		}
		
// Functions to run on plugin activation
		
		function db_install(){
			global $wpdb;
    		$maintable = $wpdb->prefix."leaveanote";
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
    		$comments = $wpdb->prefix."comments";

    		$structure = "CREATE TABLE $maintable (id INT(9) NOT NULL AUTO_INCREMENT, commentID BIGINT NOT NULL, topPos VARCHAR(10) NOT NULL, leftPos VARCHAR(10) NOT NULL, UNIQUE KEY id (id));";
    		$structure2 = "CREATE TABLE $leaveanote_posts (id INT(9) NOT NULL AUTO_INCREMENT, post_ID BIGINT NOT NULL, on_off VARCHAR(10) NOT NULL, UNIQUE KEY id (id));";
			$wpdb->query($structure);
		    $wpdb->query($structure2);
		}
		
		function set_defaults(){
			update_option('leaveanote_char', 200);
			update_option('leaveanote_height', '');
			update_option('leaveanote_width', 130);
			update_option('leaveanote_background', 'FFFF99');
			update_option('leaveanote_showhide', 'show');
			update_option('leaveanote_css', 0);
			update_option('leaveanote_excerpt', 'char');
		}
		
/* This function copies all the existing post and comment ids from the wp database and copies them to tables generated by the plugin. 
This allows the plugin to use messages that existed before the plugin was installed. */
		
		function copy_message_data(){
			global $wpdb;
			$maintable = $wpdb->prefix."leaveanote";
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
    		$comments = $wpdb->prefix."comments";
			$posts = $wpdb->prefix."posts";
			$IDs = $wpdb->get_results("SELECT comment_ID FROM $comments;");
			
			$absTopMin = 0;
			$absTopMax = 480;
			$absLeftMin = 0;
			$absLeftMax = 640;
			
			foreach ($IDs as $item){
	
				$posTop = rand($absTopMin, $absTopMax);
				$posLeft = rand($absLeftMin, $absLeftMax);	
				
				$posTop = strval($posTop) . 'px';
				$posLeft = strval($posLeft) . 'px';
				$commentID = $item->comment_ID;
				
				$dataarray = array('commentID' => $commentID, 'topPos' => $posTop, 'leftPos' => $posLeft);
				$wpdb->insert($maintable, $dataarray);
			}
			
			$postIDs = $wpdb->get_results("SELECT ID FROM $posts;");
			foreach ($postIDs as $postID){
				$id = $postID->ID;
				$dataarray2 = array('post_ID' => $id, 'on_off' => 'on');
				$wpdb->insert($leaveanote_posts, $dataarray2); 
			}	
		}
		
		function plugin_install(){
			$this->db_install();
			$this->set_defaults();
			$this->copy_message_data();
		}
		
// Function to run on posting a new comment
		
		function save_comment($comment){
			global $wpdb;
			$maintable = $wpdb->prefix."leaveanote";
			$comments = $wpdb->prefix."comments";
			$absTopMin = 0;
			$absTopMax = 480;
			$absLeftMin = 0;
			$absLeftMax = 640;
		
			$posTop = rand($absTopMin, $absTopMax);
			$posLeft = rand($absLeftMin, $absLeftMax);
				
			$posTop = strval($posTop) . 'px';
			$posLeft = strval($posLeft) . 'px';
			
			$dataarray = array('commentID' => $comment, 'topPos' => $posTop, 'leftPos' => $posLeft);
			$wpdb->insert($maintable, $dataarray);
			return $comment;
		}
		
// Attach needed javascript and css files in the head
		
		function link_scripts(){
			$blogurl = get_bloginfo("url");
			$height = get_option('leaveanote_height');
			$width = get_option('leaveanote_width');
			$background = get_option('leaveanote_background');
			wp_enqueue_script('jquery');
			wp_enqueue_script('jquery-ui');
			wp_enqueue_script('jquery-ui-core');
			wp_enqueue_script('jquery-ui-draggable');
			wp_enqueue_script('moved', WP_PLUGIN_URL . '/leave-a-note/js/moved.js', array('jquery', 'jquery-ui-core', 'jquery-ui-draggable'));
			print '<script type="text/javascript">var pluginRoot = "' . $blogurl . '/wp-content/plugins/leave-a-note";</script>';
			print '<link href="' . $blogurl . '/wp-content/plugins/leave-a-note/css/leaveanote.css" rel="stylesheet" type="text/css" media="screen" />';
			$css = get_option('leaveanote_css');
			if (!$css){
				print '<style type="text/css" media="screen">li.post-its{';
					if ($height>0) {
						print 'height:' . $height . 'px; ';
					}
					if ($width>0){
						print 'width:' . $width . 'px; ';
					}
					if ($background != 'FFFF99'){
						print 'background-color:#' . $background . '; ';
					}
				print '}</style>';
			}
		}
		
// Create admin page

		function ajax_request(){
			wp_enqueue_script('admin-ajax', WP_PLUGIN_URL . '/leave-a-note/js/admin-ajax.js', array('jquery'));
		}
		
// Attach markup for on/off switch to edit post page
		function add_leaveanote_box(){
			add_meta_box('leaveanote-onoff-box', __('Leave-a-Note Visual Comments'), 'leaveanote_write_custombox', 'post', 'normal');
		}
		
// Generates the admin settings panel for leave-a-note
		function leaveanote_admin() {  
		    add_options_page("Leave-a-Note", "Leave-a-Note", 1, "leaveanote", "leaveanote_admin_page");
			$this->add_leaveanote_box();
		 }
		
// Generates the on/off column in the posts page
		function onoff_column($defaults){
			$defaults['onoff'] = __('Leave-a-Note On/Off');
   			return $defaults;
		}
		
// Retrieves on/off data from db to display in the column
		function get_onoff($column_name, $post_id){
			global $wpdb;
			global $post;
			$post_id = $post->ID;
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
    		if( $column_name == 'onoff' ) {
        		$query = "SELECT on_off FROM $leaveanote_posts WHERE post_ID=$post_id;";
        		$onoff = $wpdb->get_results($query);
        		if( $onoff ) {
            		echo $onoff[0]->on_off;
        		} else {
            		echo '<i>'.__('ERROR DISPLAYING ON/OFF').'</i>';
        		} 
			}
		}

// Function called on saving a post to get on/off data and send it to the db
		function save_onoff($post_ID){
			global $wpdb;
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
			$post_id = $post_ID;
			$onoff=$_POST['leaveanote_onoff'];
			$dataarray = array('on_off' => $onoff);
			$wherearray = array('post_ID' => $post_id);
			$wpdb->update($leaveanote_posts, $dataarray, $wherearray);
		}

// Function called on deactivation. Serves to remove the databases created by the plugin.
		function leaveanote_deactivate(){
			global $wpdb;
    		$maintable = $wpdb->prefix."leaveanote";
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
    		$structure = "DROP TABLE $maintable;";
    		$structure2 = "DROP TABLE $leaveanote_posts;";
			$wpdb->query($structure);
		    $wpdb->query($structure2);
		}
		
// Function that adds the class name needed to make each comment a note in the leave-a-note system. 
		function add_entry_class($classes){
			global $wpdb;
			global $post;
			global $comment;
			$postID = $post->ID;
			$leaveanote_posts = $wpdb->prefix."leaveanote_posts";
			$onoff = $wpdb->get_results("SELECT on_off FROM $leaveanote_posts WHERE post_ID=$postID");
			$onoffItem = $onoff[0];
			$onoff = $onoffItem->on_off;
			if ($onoff == 'on'){
				$id = $comment->comment_ID;
   				$maintable = $wpdb->prefix."leaveanote";
   				$left = $wpdb->get_results("SELECT leftPos FROM $maintable WHERE commentID=$id");
   				$top = $wpdb->get_results("SELECT topPos FROM $maintable WHERE commentID=$id");
   				$l = $left[0];
   				$lpos = $l->leftPos;
   				$t = $top[0];
   				$tpos = $t->topPos;
   				echo 'style="position:absolute; top:'.$tpos.'; left:'.$lpos.';';
				$value = get_option('leaveanote_showhide');
				if ($value == 'show') {
					echo ' display:block;';
				} elseif ($value == 'hide') {
					echo ' display:none;';
				}
   				echo '" ';
				array_push($classes, "post-its");
				return $classes;
			} else {
				return $classes;
			}
		}	
	}
}

if (class_exists("LeaveaNoteVisualCommenting")) {
	$leaveanote = new LeaveaNoteVisualCommenting();
	if (isset($leaveanote)) {
	// Actions
 		add_action('activate_leave-a-note/leaveanote.php', array(&$leaveanote, 'plugin_install'), 1);
		add_action('comment_post', array(&$leaveanote, 'save_comment'), 1);
		add_action('wp_print_scripts', array(&$leaveanote, 'link_scripts'), 1);
		add_action('admin_menu', array(&$leaveanote, 'leaveanote_admin'), 1);
		add_action('manage_posts_custom_column', array(&$leaveanote, 'get_onoff'), 1);
		add_action('save_post', array(&$leaveanote, 'save_onoff'), 1);
		add_action('admin_print_scripts', array(&$leaveanote, 'ajax_request'), 1);
	// Filters
		add_filter('manage_posts_columns', array(&$leaveanote, 'onoff_column'), 1);
		add_filter('comment_class', array(&$leaveanote, 'add_entry_class'), 1);
		register_deactivation_hook( __FILE__, array(&$leaveanote, 'leaveanote_deactivate'));
	}
} 
?>